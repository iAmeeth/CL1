Assignment No. : B9
Roll No. : 4252

********************* INPUT FILES ******************

Science :

Document 1:
Science is a systematic enterprise that builds and organizes knowledge in the form of testable explanations and predictions about the universe. In an older and closely related meaning, science also refers to this body of knowledge itself, of the type that can be rationally explained and reliably applied. Ever since classical antiquity, science as a type of knowledge has been closely linked to philosophy. In the West during the early modern period the term Science and Natural Philosophy were sometimes used interchangeably to refer to the study of natural phenomena and, until the 19th century, natural philosophy was considered a branch of philosophy.

Document 2:
In modern usage science most often refers to a way of pursuing knowledge, not only the knowledge itself. In the 17th and 18th centuries scientists increasingly sought to formulate knowledge in terms of laws of nature. Over the course of the 19th century, the word "science" became increasingly associated with the scientific method itself, as a disciplined way to study the natural world, including physics, chemistry, geology and biology. It is in the 19th century also that the term scientist began to be applied to those who sought knowledge and understanding of nature.

Document 3:
Modern science is typically subdivided into the natural sciences which study the material world, the social sciences which study people and societies, and the formal sciences like mathematics. The formal sciences are often excluded as they do not depend on empirical observations. Disciplines which use science like engineering and medicine may also be considered to be applied sciences.

Entertainment :

Document 1:
The experience of being entertained has come to be strongly associated with amusement, so that one common understanding of the idea is fun and laughter, although many entertainments have a serious purpose. This may be the case in the various forms of ceremony, celebration, religious festival, or satire for example. Hence, there is the possibility that what appears as entertainment may also be a means of achieving insight or intellectual growth.

Document 2:
An important aspect of entertainment is the audience, which turns a private recreation or leisure activity into entertainment. The audience may have a passive role, as in the case of persons watching a play, opera, television show, or film; or the audience role may be active, as in the case of games, where the participant/audience roles may be routinely reversed. Entertainment can be public or private, involving formal, scripted performance, as in the case of theatre or concerts; or unscripted and spontaneous, as in the case of children's games. Most forms of entertainment have persisted over many centuries, evolving due to changes in culture, technology, and fashion. Films and video games, for example, although they use newer media, continue to tell stories, present drama, and play music. Festivals devoted to music, film, or dance allow audiences to be entertained over a number of consecutive days.

Document 3:
Some activities that once were considered entertaining, particularly public punishments, have been removed from the public arena. Others, such as fencing or archery, once necessary skills for some, have become serious sports and even professions for the participants, at the same time developing into entertainment with wider appeal for bigger audiences. In the same way, other necessary skills, such as cooking, have developed into performances among professionals, staged as global competitions and then broadcast for entertainment. What is entertainment for one group or individual may be regarded as work by another.

Test File:

The action of providing or being provided with amusement or enjoyment.

******************************* CODE *****************************

from math import log
from math import sqrt
from collections import Counter
from operator import itemgetter

#function to calculate inverse document frequency of terms
def idf(term, allDocuments):
    numDocumentsWithThisTerm = 0
    for cnt in allDocuments:
        if term in cnt:
            numDocumentsWithThisTerm = numDocumentsWithThisTerm + 1
    if numDocumentsWithThisTerm > 0:
        return round(log(float(float(len(allDocuments))/float(numDocumentsWithThisTerm)),2),3)
    else:
        return 0

#function to calculate frequency of individual terms
def tf(term, document):
    return document.count(term)

#function to calculate tfidf
def caltfidf(term,doc):
    return tf(term,doc)*idf(term,terms)

#cosine similarity calculated using tfidf
def cosineSimilarity(doc,q,d):
	a=0
	for x in d:
		a=a+caltfidf(x,doc)*caltfidf(x,q)
	b=lengthof(doc,d)*lengthof(q,d)
	if not b:
		return 0
	else:
		return round(a/b,3)
def lengthof(doc,d):
	val=0
	for x in d:
		val=val+pow(caltfidf(x,doc),2)
	return sqrt(val)

#doc is all training files
#dataset has files with their 'class'
#contents of files are stored in f
f=[]
doc=['doc1.txt','doc2.txt','doc3.txt','doc4.txt','doc5.txt','doc6.txt']
dataset=[['doc1.txt','science'],['doc2.txt','science'],['doc3.txt','science'],['doc4.txt','entertainment'],['doc5.txt','entertainment'],['doc6.txt','entertainment']]
for x in doc:
	f.append(open(x,'r').read())
#q is file to be classified
testf=raw_input('test file : ')
q=open(testf,'r').readline().lower()

#terms has cleaned content of files
terms=[]
for x in f:
	terms.append(x.lower().rstrip('\n'))

#fin_terms is list of unique words
fin_terms=[]
for x in terms:
	fin_terms=fin_terms+x.split()
fin_terms=set(fin_terms)
fin_terms=list(fin_terms)
#print fin_terms

print '\nCosine Similarity Values'
#cosine similarity of test file calculated wrt all training files
cnt=0
for x in terms:
	dataset[cnt]=dataset[cnt]+[cosineSimilarity(q,x,fin_terms)]
	cnt=cnt+1
print dataset

#knn classsification used with cosine similarity value to find 3 closest documents
k=3
#dataset is sorted on basis of cosine similarity values
sorted_dataset=sorted(dataset,key=itemgetter(2),reverse=True)
top_k=sorted_dataset[:k]
top_k[:] = (x for x in top_k if x[2] != 0)
#show error msg if all similarity values are 0
if len(top_k)== 0:
	print 'Does not match'
else:
	class_counts=Counter(category for (document,category,value) in top_k)
	print class_counts
	#match class to the class which is max in top k
	classification=max(class_counts,key=lambda cls:class_counts[cls])
	print 'Class of test file is : ',classification

*********************** OUTPUT ************************

abhidnya@abhidnya-HP-Pavilion-TS-Sleekbook-14:~/b9$ python f.py 
test file : t.txt

Cosine Similarity Values
[['doc1.txt', 'science', 0.008], ['doc2.txt', 'science', 0.022], ['doc3.txt', 'science', 0.006], ['doc4.txt', 'entertainment', 0.194], ['doc5.txt', 'entertainment', 0.005], ['doc6.txt', 'entertainment', 0.019]]
Counter({'entertainment': 2, 'science': 1})
Class of test file is :  entertainment
abhidnya@abhidnya-HP-Pavilion-TS-Sleekbook-14:~/b9$ python f.py 
test file : doc1.txt

Cosine Similarity Values
[['doc1.txt', 'science', 1.0], ['doc2.txt', 'science', 0.163], ['doc3.txt', 'science', 0.081], ['doc4.txt', 'entertainment', 0.022], ['doc5.txt', 'entertainment', 0.009], ['doc6.txt', 'entertainment', 0.029]]
Counter({'science': 3})
Class of test file is :  science

